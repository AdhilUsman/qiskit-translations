msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 14:06+0000\n"
"PO-Revision-Date: 2021-06-16 17:12\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/docs/locale/en/LC_MESSAGES/tutorials/algorithms/07_grover_examples.po\n"
"X-Crowdin-File-ID: 9506\n"
"Language: ko_KR\n"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:10
msgid "This page was generated from `tutorials/algorithms/07_grover_examples.ipynb`__."
msgstr "이 페이지는 `tutorials/algorithms/07_grover_examples.ipynb`__ 에서 생성되었다."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:12
msgid "Run interactively in the `IBM Quantum lab <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover_examples.ipynb>`_."
msgstr "`IBM 퀀텀 랩 <https://quantum-computing.ibm.com/jupyter/tutorial/algorithms/07_grover_examples.ipynb>`_ 에서 대화식으로 실행하시오."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:9
msgid "Grover’s algorithm examples"
msgstr "그로버 알고리즘 예제들"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:11
msgid "This notebook has examples demonstrating how to use the Qiskit `Grover <https://qiskit.org/documentation/stubs/qiskit.algorithms.Grover.html>`__ search algorithm, with different oracles."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:39
msgid "Finding solutions to 3-SAT problems"
msgstr "3-SAT 문제에 대한 해결책 찾기"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:41
msgid "Let’s look at an example 3-Satisfiability (3-SAT) problem and walk-through how we can use Quantum Search to find its satisfying solutions. 3-SAT problems are usually expressed in `Conjunctive Normal Forms (CNF) <https://en.wikipedia.org/wiki/Conjunctive_normal_form>`__ and written in the `DIMACS-CNF <http://www.satcompetition.org/2009/format-benchmarks2009.html>`__ format. For example:"
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:70
msgid "The CNF of this 3-SAT instance contains 3 variables and 5 clauses:"
msgstr "이 3-SAT 인스턴스의 CNF에는 3개의 변수와 5개의 절이 포함된다."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:72
msgid ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"
msgstr ":math:`(\\neg v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee v_3) \\wedge (v_1 \\vee v_2 \\vee \\neg v_3) \\wedge (v_1 \\vee \\neg v_2 \\vee \\neg v_3) \\wedge (\\neg v_1 \\vee v_2 \\vee v_3)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:74
msgid "It can be verified that this 3-SAT problem instance has three satisfying solutions:"
msgstr "이 3-SAT 문제 인스턴스는 다음과 같은 세 가지 해결책을 갖고 있다는 것을 확인할 수 있다."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:76
msgid ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"
msgstr ":math:`(v_1, v_2, v_3) = (T, F, T)` or :math:`(F, F, F)` or :math:`(T, T, F)`"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:78
msgid "Or, expressed using the DIMACS notation:"
msgstr "또는 다음처럼 DIMACS 표기법을 사용하여 표현할 수 있다:"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:80
msgid "``1 -2 3``, or ``-1 -2 -3``, or ``1 2 -3``."
msgstr "``1 -2 3`` 혹은 ``-1 -2 -3`` 혹은 ``1 2 -3``."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:82
msgid "With this example problem input, we then create the corresponding ``oracle`` for our ``Grover`` search. In particular, we use the ``PhaseOracle`` component, which supports parsing DIMACS-CNF format strings and constructing the corresponding oracle circuit."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:117
msgid "The ``oracle`` can now be used to create an Grover instance:"
msgstr "이제 Grover 인스턴스를 생성하는 데 ``oracle`` 을 사용할 수 있다."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:140
msgid "We can then configure the backend and run the Grover instance to get the result:"
msgstr "그런 다음 백엔드를 구성하고 그로버 인스턴스를 실행하여 결과를 얻을 수 있다."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:186
msgid "As seen above, a satisfying solution to the specified 3-SAT problem is obtained. And it is indeed one of the three satisfying solutions."
msgstr "위에서 볼 수 있듯이 지정된 3-SAT 문제에 대한 만족스러운 솔루션을 얻는다. 그리고 획득한 솔루션은 실제로 세 가지 만족스러운 솔루션 중 하나이다."

#: ../../tutorials/algorithms/07_grover_examples.ipynb:188
msgid "Since we used the ``'aer_simulator'``, the complete measurement result is also returned, as shown in the plot below, where it can be seen that the binary strings ``000``, ``011``, and ``101`` (note the bit order in each string), corresponding to the three satisfying solutions all have high probabilities associated with them."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:219
msgid "Boolean Logical Expressions"
msgstr "불리언(Boolean) 논리 표현식"

#: ../../tutorials/algorithms/07_grover_examples.ipynb:221
msgid "Qiskit’s ``Grover`` can also be used to perform Quantum Search on an ``Oracle`` constructed from other means, in addition to DIMACS. For example, the ``PhaseOracle`` can actually be configured using arbitrary Boolean logical expressions, as demonstrated below."
msgstr ""

#: ../../tutorials/algorithms/07_grover_examples.ipynb:258
msgid "In the example above, the input Boolean logical expression ``'(w ^ x) & ~(y ^ z) & (x & y & z)'`` should be quite self-explanatory, where ``^``, ``~``, and ``&`` represent the Boolean logical XOR, NOT, and AND operators, respectively. It should be quite easy to figure out the satisfying solution by examining its parts: ``w ^ x`` calls for ``w`` and ``x`` taking different values; ``~(y ^ z)`` requires ``y`` and ``z`` be the same; ``x & y & z`` dictates all three to be ``True``. Putting these together, we get the satisfying solution ``(w, x, y, z) = (False, True, True, True)``, which our ``Grover``\\ ’s result agrees with."
msgstr ""

